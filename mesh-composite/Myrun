#!/bin/bash
#!/bin/bash
cd ${0%/*} || exit 1    # run from this directory

# Source tutorial run functions
. $WM_PROJECT_DIR/bin/tools/RunFunctions


function runAndTime() 
{   
    #set -x
    arg1="$1"
    shift 1
    #pwd >$(tty);
    start_time_merging="$(date -u +%s.%N)";
    # cd ${0%/*} || exit 1 ;
	"$@";
	#pwd >$(tty);
    end_time_merging="$(date -u +%s.%N)";
    elapsed_merging="$(bc <<<"$end_time_merging-$start_time_merging")";
    echo "$arg1 Duration = $elapsed_merging seconds" >$(tty); # force print to console
    echo "$arg1 Duration = $elapsed_merging seconds" >> $log_file; # print also to log file
    #set +x
}

function cleanTime()
{
    rm -r $main_folder/main/[0-9].[0-9]*  > /dev/null 2>&1
    rm -r $main_folder/main/[0-9][0-9][0-9][0-9]  > /dev/null 2>&1
    rm -r $main_folder/main/[0-9][0-9][0-9]  > /dev/null 2>&1
    rm -r $main_folder/main/[0-9][0-9]  > /dev/null 2>&1
    rm -r $main_folder/main/[0-9]  > /dev/null 2>&1
}

function extractData() # simply copy important folders and files up
{
    cp $main_folder/main/postProcessing $main_folder/_postProcessing -rT
    cp $main_folder/main/fig $main_folder/_fig -rT
    cp $main_folder/main/controls $main_folder/_controls -rT
    cp $main_folder/main/fig/meanpower $main_folder/_meanpower 
    cp $main_folder/main/fig/meannut $main_folder/_meannut
    cp $main_folder/main/fig/residuals.png $main_folder/_residuals.png
    cp $main_folder/main/log.run $main_folder/_log.run
}

function applyOptions()
{
    mkdir $main_folder/main/fig > /dev/null 2>&1
    mkdir $main_folder/main/0 > /dev/null 2>&1
    #cp $main_folder/main/0.org/* $main_folder/main/0/ -r
    if [[ $options = *"komegasst"* ]]; then
        echo "Applying kOmegaSST..."
        cp $main_folder/main/0.org-komegasst/* $main_folder/main/0/ -r
        cp $main_folder/main/constant/turbulenceProperties.komegasst $main_folder/main/constant/turbulenceProperties
        cp $main_folder/main/system/fvSchemes.komegasst $main_folder/main/system/fvSchemes
        
    elif [[ $options = *"kepsilon"* ]]; then
        echo "Applying kEpsilon..."
        cp $main_folder/main/0.org-kepsilon/* $main_folder/main/0/ -r
        cp $main_folder/main/constant/turbulenceProperties.kepsilon $main_folder/main/constant/turbulenceProperties
        cp $main_folder/main/system/fvSchemes.kepsilon $main_folder/main/system/fvSchemes
    fi
}

# first argument is what command to run
if [ ! -n "$1" ]
then
    commandname="full"
    commandname="clean mesh run post"
else
    commandname=$1
    if [[ $commandname = "full" ]]; then
        commandname="clean mesh run post"
    fi
fi

# second argument is the path where we have blade0, blade1, ..., steady folders
if [ ! -n "$2" ]
then
    mesh_folder=mesh
else 
    mesh_folder=$2
fi
#echo "$mesh_folder"

# third argument is the path where we find a main folder
if [ ! -n "$3" ]
then
    main_folder=.
else 
    main_folder=$3
fi

# forth argument is the path where we find a main folder
if [ ! -n "$4" ]
then
    options="komegasst"
else 
    options=$4
fi
#echo "$main_folder"

#################
# PARAMETERS ####
corenum=2 # remember to change also number in decomposeParDict
log_file=$main_folder/main/log.run
endTime=$(cat "$main_folder/main/controls/endTime")

if [ ! -f $log_file ]; then
	echo "Log of timings" > $log_file
	echo $(date '+%d/%m/%Y %H:%M:%S'); >> $log_file
else
	echo "Append to Log of timings" >> $log_file
	echo $(date '+%d/%m/%Y %H:%M:%S'); >> $log_file
fi

start_time="$(date -u +%s.%N)"

# use when modify blade0/Myrun
cp $mesh_folder/blade0/Myrun $mesh_folder/blade1/Myrun
cp $mesh_folder/blade0/Myrun $mesh_folder/blade2/Myrun
cp $mesh_folder/blade0/Myrun $mesh_folder/circle-ext/Myrun
cp $mesh_folder/blade0/Myrun $mesh_folder/steady/Myrun

if [[ $commandname = *"clean"* ]]; then
    $mesh_folder/steady/Allclean | tee -a "$log_file"
    $mesh_folder/circle-ext/Allclean | tee -a "$log_file"
    $mesh_folder/blade0/Allclean | tee -a "$log_file"
    $mesh_folder/blade1/Allclean | tee -a "$log_file"
    $mesh_folder/blade2/Allclean | tee -a "$log_file"
    $main_folder/main/Allclean | tee -a "$log_file"
    cleanTime 
    rm -r $main_folder/main/fig > /dev/null 2>&1
    
    mkdir $mesh_folder/steady/log > /dev/null 2>&1
    mkdir $mesh_folder/circle-ext/log > /dev/null 2>&1
    mkdir $mesh_folder/blade0/log > /dev/null 2>&1
    mkdir $mesh_folder/blade1/log > /dev/null 2>&1
    mkdir $mesh_folder/blade2/log > /dev/null 2>&1
    mkdir $main_folder/main/log > /dev/null 2>&1
fi

if [[ $commandname = *"mesh"* ]]; then
    mkdir $mesh_folder/steady/constant/triSurface > /dev/null 2>&1
    mkdir $mesh_folder/circle-ext/constant/triSurface > /dev/null 2>&1
    mkdir $mesh_folder/blade0/constant/triSurface > /dev/null 2>&1
    mkdir $mesh_folder/blade1/constant/triSurface > /dev/null 2>&1
    mkdir $mesh_folder/blade2/constant/triSurface > /dev/null 2>&1
    mkdir $main_folder/main/constant/triSurface > /dev/null 2>&1

    cp -r $mesh_folder/include $mesh_folder/blade0/
    cp -r $mesh_folder/include $mesh_folder/blade1/
    cp -r $mesh_folder/include $mesh_folder/blade2/
    cp -r $mesh_folder/include $mesh_folder/circle-ext/
    cp -r $mesh_folder/include $mesh_folder/steady/

    bash Myscale $mesh_folder

    # Parallel computation
    $mesh_folder/blade0/Myrun | tee -a "$log_file" &
    $mesh_folder/blade1/Myrun | tee -a "$log_file" &
    $mesh_folder/blade2/Myrun | tee -a "$log_file" &
    $mesh_folder/circle-ext/Myrun | tee -a "$log_file" &
    $mesh_folder/steady/Myrun | tee -a "$log_file" &
    wait # required for syncronization

    echo "Merging..." | tee -a "$log_file"
    (runAndTime "    blade0 -> circle-ext" "mergeMeshes" "-overwrite" "$mesh_folder/circle-ext/" "$mesh_folder/blade0/" > $main_folder/main/log/log.mergeMeshes-blade0) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    blade1 -> circle-ext" "mergeMeshes" "-overwrite" "$mesh_folder/circle-ext/" "$mesh_folder/blade1/" > $main_folder/main/log/log.mergeMeshes-blade1) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    blade2 -> circle-ext" "mergeMeshes" "-overwrite" "$mesh_folder/circle-ext/" "$mesh_folder/blade2/" > $main_folder/main/log/log.mergeMeshes-blade2) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    circle-ext -> steady" "mergeMeshes" "-overwrite" "$mesh_folder/steady/" "$mesh_folder/circle-ext/" > $main_folder/main/log/log.mergeMeshes-alltogether) 3>&1 1>&2 2>&3 | tee -a $log_file

    echo "Copying mesh in main folder..." | tee -a "$log_file"
    cp -r $mesh_folder/steady/constant/polyMesh $main_folder/main/constant/.
    
    applyOptions

    echo "Creating patches..." | tee -a "$log_file"
    (runAndTime "    " "createPatch" "-case" "$main_folder/main/" "-overwrite" > $main_folder/main/log/log.createPatch) 3>&1 1>&2 2>&3 | tee -a $log_file

    echo "Extruding the mesh..." | tee -a "$log_file"
    cd $main_folder/main
    # extrudeMesh -case main # doesn't work ????
    (runAndTime "    " "extrudeMesh" > log/log.extrudeMesh) 3>&1 1>&2 2>&3 | tee -a $log_file
    cd - # it goes back to previous directory

    echo "Refining the wall layers..." | tee -a "$log_file"
    (runAndTime "    refinement 1" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer1) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement 2" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer2) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement 3" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer3) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement 4" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer4) 3>&1 1>&2 2>&3 | tee -a $log_file
    #runAndTime "    refinement 3" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer3
    #runAndTime "    refinement 4" "refineWallLayer" "(blades)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayer4

    (runAndTime "    refinement lowerWall 1" "refineWallLayer" "(lowerWall)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayerlowerWall1) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement lowerWall 2" "refineWallLayer" "(lowerWall)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayerlowerWall2) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement lowerWall 3" "refineWallLayer" "(lowerWall)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayerlowerWall3) 3>&1 1>&2 2>&3 | tee -a $log_file
    (runAndTime "    refinement lowerWall 4" "refineWallLayer" "(lowerWall)" "0.5" "-overwrite" "-case" "$main_folder/main" > $main_folder/main/log/log.refineWallLayerlowerWall4) 3>&1 1>&2 2>&3 | tee -a $log_file

    # delete useless files
    #rm -r $main_folder/main/0
    #rm -r $main_folder/main/constant/polyMesh/sets/

    echo "Renumbering the mesh..." | tee -a "$log_file"
    (runAndTime "    " "renumberMesh" "-overwrite" "-case" "$main_folder/main/" "-constant" > $main_folder/main/log/log.renumberMesh) 3>&1 1>&2 2>&3 | tee -a $log_file

    if [[ $commandname = *"move"* ]]; then
        echo "Dynamic mesh creation..." | tee -a "$log_file"
        (runAndTime "    " "moveDynamicMesh" "-case" "$main_folder/main/" "-noFunctionObjects" > $main_folder/main/log/log.moveDynamicMesh) 3>&1 1>&2 2>&3 | tee -a $log_file
        #(runAndTime "    " "mpirun" "-np" "$corenum" "moveDynamicMesh" "-case" "$main_folder/main/" "-noFunctionObjects" "-parallel" > $main_folder/main/log/log.moveDynamicMesh) 3>&1 1>&2 2>&3 | tee -a $log_file
    fi
 
    echo "Checking mesh..." | tee -a "$log_file"
    (runAndTime "    " "checkMesh" "-case" "$main_folder/main/" > $main_folder/main/log/log.checkMesh) 3>&1 1>&2 2>&3 | tee -a $log_file

    echo "Changing patches types..." | tee -a "$log_file"
    (runAndTime "    " "changeDictionary" "-case" "$main_folder/main/" > $main_folder/main/log/log.checkMesh) 3>&1 1>&2 2>&3 | tee -a $log_file
fi


if [[ $commandname = *"run"* ]]; then

    applyOptions
    
    rm -r $main_folder/main/postProcessing > /dev/null 2>&1
    #cleanTime 
    
    if [[ $commandname = *"par"* ]]; then
        echo "Running decomposePar..." | tee -a "$log_file"
        (runAndTime "    " "decomposePar" "-case" "$main_folder/main/" "-force" > $main_folder/main/log/log.decomposePar) 3>&1 1>&2 2>&3 | tee -a $log_file
    fi

    
    sleep 10 && ./MyfoamMonitor -logscale -refresh 1 -idle 20 "$main_folder/main/postProcessing/residuals/0/residuals.dat" "$main_folder/main/fig/residuals.png" &
    sleep 10 && python3 checkcompletion.py -case "$main_folder/main/" -endtime $endTime -pause 1 &
    
    echo "Running pimpleDyMFoam..." | tee -a "$log_file"
    if [[ $commandname = *"par"* ]]; then
        (runAndTime "    " "mpirun" "-np" "$corenum" "pimpleDyMFoam" "-case" "$main_folder/main/" "-parallel" > $main_folder/main/log/log.pimpleDyMFoam) 3>&1 1>&2 2>&3 | tee -a $log_file
    else 
        (runAndTime "    " "pimpleDyMFoam" "-case" "$main_folder/main/" > $main_folder/main/log/log.pimpleDyMFoam) 3>&1 1>&2 2>&3 | tee -a $log_file
    fi
    
    if [[ $commandname = *"par"* ]]; then
        echo "Running reconstructPar..." | tee -a "$log_file"
        (runAndTime "    " "reconstructPar" "-case" "$main_folder/main" > $main_folder/main/log/log.reconstructPar) 3>&1 1>&2 2>&3 | tee -a $log_file
    fi
fi


if [[ $commandname = *"post"* ]]; then
    echo "Saving figures..." | tee -a "$log_file"
    (python plotForces.py "$main_folder/main/postProcessing" "forces-blade0" --save --savepath "$main_folder/main/fig/" ) 3>&1 1>&2 2>&3 | tee -a $log_file &
    (python plotForces.py "$main_folder/main/postProcessing" "forces-blade1" --save --savepath "$main_folder/main/fig/" ) 3>&1 1>&2 2>&3 | tee -a $log_file &
    (python plotForces.py "$main_folder/main/postProcessing" "forces-blade2" --save --savepath "$main_folder/main/fig/" ) 3>&1 1>&2 2>&3 | tee -a $log_file &
    (python extractForces.py -case "$main_folder/main" --save --savepath "$main_folder/main/fig/") 3>&1 1>&2 2>&3 | tee -a $log_file &
    (python extractNut.py -case "$main_folder/main" --save --savepath "$main_folder/main/fig/") 3>&1 1>&2 2>&3 | tee -a $log_file &
    wait
    
    ./MyfoamMonitor -logscale -idle 1 "$main_folder/main/postProcessing/residuals/0/residuals.dat" "$main_folder/main/fig/residuals.png" &
fi


end_time="$(date -u +%s.%N)"
elapsed="$(bc <<<"$end_time-$start_time")"
echo "<--> DONE --> Total duration = $elapsed seconds" | tee -a "$log_file"

if [[ ! $main_folder = "." ]]; then
        extractData
fi

if [[ $commandname = *"extract"* ]]; then
    extractData
fi

# plotting residuals
# foamMonitor -l -r 1 postProcessing/residuals/0/residuals.dat
# python plot.py -x 1 -y 4 --update 1 postProcessing/residuals/0/residuals.dat --ylog



#checkMesh -case main/

#paraFoam -case main


#snappyHexMesh -overwrite -case main

#snappyHexMesh -overwrite

#createBaffles -overwrite

#mergeOrSplitBaffles -split -overwrite

#createPatch -overwrite

#renumberMesh -overwrite 

#refineWallLayer "(blades)" 0.5 -overwrite
#refineWallLayer "(blades)" 0.5 -overwrite
#refineWallLayer "(blades)" 0.5 -overwrite

#extrudeMesh

#cp -r 0.org 0

#snappyHexMesh -overwrite

#extrudeMesh

#createPatch -overwrite

#paraFoam -touch

# function runAndTime() {
# 
#     start_time_merging="$(date -u +%s.%N)"
#     
#     mergeMeshes -overwrite steady/ circle-ext/ > main/log/log.mergeMeshes-alltogether
#     
#     end_time_merging="$(date -u +%s.%N)"
#     elapsed_merging="$(bc <<<"$end_time_merging-$start_time_merging")"
#     echo "      Duration = $elapsed_merging seconds"
# 
#    echo "Parameter #1 is $1"
# }


# ----------------------------------------------------------------- end-of-file
