/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    location    "system";
    object      controlDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

application     pimpleDyMFoam;

startFrom       startTime;

startTime       0;

stopAt          endTime;

endTime         #include "../controls/endTime"; //0.3; //1.8;

deltaT          0.0003; // 0.0001;

// writeControl    timeStep;
// writeInterval   60;// 30; //120;

writeControl    adjustableRunTime;
writeInterval   0.02; // 500 steps saved in 1.8 seconds
// writeInterval   0.01; // 180 steps saved in 1.8 seconds

purgeWrite      0;

writeFormat     binary; //ascii;

writePrecision  6;

writeCompression on; //off;

timeFormat      general;

timePrecision   6;

runTimeModifiable true;

adjustTimeStep  yes;
maxCo           #include "../controls/maxCo";

functions
{

	
    #includeFunc  residuals

	line-outlet
	{
        functionObjectLibs ("libsampling.so");
		type		sets;
		// outputControl		timeStep;
        enabled         true;
        writeControl   outputTime; //timeStep; 
        writeInterval  1;
		

		// Set output format : choice of
		//      xmgr
		//      jplot
		//      gnuplot
		//      raw
		setFormat raw;

		// Surface output format. Choice of
		//      null        : suppress output
		//      foamFile    : separate points, faces and values file
		//      dx          : DX scalar or vector format
		//      vtk         : VTK ascii format
		//      raw         : x y z value format for use with e.g. gnuplot 'splot'.
		//
		// Note:
		// other formats such as obj, stl, etc can also be written (by proxy)
		// but without any values!
		surfaceFormat raw; //vtk;

		// interpolationScheme. choice of
		//      cell          : use cell-centre value only; constant over cells (default)
		//      cellPoint     : use cell-centre and vertex values
		//      cellPointFace : use cell-centre, vertex and face values.
		// 1] vertex values determined from neighbouring cell-centre values
		// 2] face values determined using the current face interpolation scheme
		//    for the field (linear, gamma, etc.)
		interpolationScheme cellPointFace;

		// optionally define extra controls for the output formats
		formatOptions
		{
			ensight
			{
				format  ascii;
			}
		}

		// Fields to sample.
		fields
		(
			nut
			//    U
			//    magU
			//Ux
			//    Uy
		);


		// Set sampling definition: choice of
		//      uniform             evenly distributed points on line
		//      face                one point per face intersection
		//      midPoint            one point per cell, inbetween two face intersections
		//      midPointAndFace     combination of face and midPoint
		//
		//      curve               specified points, not nessecary on line, uses
		//                          tracking
		//      cloud               specified points, uses findCell
		//
		// axis: how to write point coordinate. Choice of
		// - x/y/z: x/y/z coordinate only
		// - xyz: three columns
		//  (probably does not make sense for anything but raw)
		// - distance: distance from start of sampling line (if uses line) or
		//             distance from first specified sampling point
		//
		// type specific:
		//      uniform, face, midPoint, midPointAndFace : start and end coordinate
		//      uniform: extra number of sampling points
		//      curve, cloud: list of coordinates
		sets
		(
			line-inlet
			{
				type        uniform;
				axis        distance;

				//- cavity. Slightly perturbed so not to align with face or edge.
				start     	(-0.59	-0.2	0);
				end       	(-0.59	0.2	0);
				nPoints     	50;
			}

			line-outlet
			{
				type        uniform;
				axis        distance;

				//- cavity. Slightly perturbed so not to align with face or edge.
				start     	(0.59	-0.2	0);
				end       	(0.59	0.2	0);
				nPoints     	50;
			}

		);


			// Surface sampling definition: choice of
			//      plane : values on plane defined by point, normal.
			//      patch : values on patch.
			//
			// 1] patches are not triangulated by default
			// 2] planes are always triangulated
			// 3] iso-surfaces are always triangulated
		surfaces
		(

		);
	}
	

//     readFields
//     {
//         type            readFields;
//         libs ("libfieldFunctionObjects.so");
//         enabled         true;
//         writeControl    timeStep;
//         writeInterval   1;
// 
//         fields
//         (
//             p T U phi
//         );
//     }
    
    
    // Calculation yPlus
    // See: src/functionObjects/field/yPlus
    yPlus
    {
        type        yPlus;
        functionObjectLibs ("libfieldFunctionObjects.so");

        rho rhoInf;
        rhoInf      1000;           // Redundant for incompressible
        enabled         true;
        writeControl   outputTime; //timeStep; 
        writeInterval  1;
    }
    
    // Calculation wallShearStress
    // See: src/functionObjects/field/wallShearStress
    wallShearStress
    {
        type        wallShearStress;
        functionObjectLibs ("libfieldFunctionObjects.so");

        rho rhoInf;
        rhoInf      1000;           // Redundant for incompressible
        enabled         true;
        writeControl   outputTime; //timeStep; 
        writeInterval  1;
    }


    // Calculation CourantNo
    // See: src/functionObjects/utilities/CourantNo
    CourantNo
    {
        type        CourantNo;
        functionObjectLibs ("libfieldFunctionObjects.so");

        enabled         true;
        writeControl   outputTime; //timeStep;
        writeInterval  1;

    }


    forces-blade0
    {
        type        forces;

        functionObjectLibs ( "libforces.so" );

        writeControl   timeStep;
        writeInterval  1;

        log         yes;

        // Reference pressure [Pa]
        pRef            100000;
        patches     (blade0);
        rho         rhoInf;
        rhoInf      1000;
        p       p;
        U       U;
        log         true;
        CofR        (0 0 0);  // Axle midpoint on ground
    }
    forces-blade1
    {
        type        forces;

        functionObjectLibs ( "libforces.so" );

        writeControl   timeStep;
        writeInterval  1;

        log         yes;

        // Reference pressure [Pa]
        pRef            100000;
        patches     (blade1);
        p       p;
        U       U;
        rho         rhoInf;
        rhoInf      1000;
        log         true;
        CofR        (0 0 0);  // Axle midpoint on ground
    }
    forces-blade2
    {
        type        forces;

        functionObjectLibs ( "libforces.so" );

        writeControl   timeStep;
        writeInterval  1;

        log         yes;

        // Reference pressure [Pa]
        pRef            100000;
        patches     (blade2);
        p       p;
        U       U;
        rho         rhoInf;
        rhoInf      1000;
        log         true;
        CofR        (0 0 0);  // Axle midpoint on ground
    }
    forces-blades
    {
        type        forces;

        functionObjectLibs ( "libforces.so" );

        writeControl   timeStep;
        writeInterval  1;

        log         yes;

        // Reference pressure [Pa]
        pRef            100000;
        patches     (blade0 blade1 blade2);
        p       p;
        U       U;
        rho         rhoInf;
        rhoInf      1000;
        log         true;
        CofR        (0 0 0);  // Axle midpoint on ground
    }
}


// ************************************************************************* //
