/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Which of the steps to run
castellatedMesh true;
snap            true;
addLayers       true;


// Geometry. Definition of all surfaces. All surfaces are of class
// searchableSurface.
// Surfaces are used
// - to specify refinement for any mesh cell intersecting it
// - to specify refinement for any mesh cell inside/outside/near
// - to 'snap' the mesh boundary to the surface
geometry
{
    AMI-ext.stl
    {
        type        triSurfaceMesh;
        name        AMI-ext-in;
    }
    AMI-int0.stl
    {
        type        triSurfaceMesh;
        name        AMI-int0-out;
    }
    AMI-int1.stl
    {
        type        triSurfaceMesh;
        name        AMI-int1-out;
    }
    AMI-int2.stl
    {
        type        triSurfaceMesh;
        name        AMI-int2-out;
    }
};



// Settings for the castellatedMesh generation.
castellatedMeshControls
{
	#include "../include/castelleted-prop"

    // Surface based refinement
    // ~~~~~~~~~~~~~~~~~~~~~~~~

    // Specifies two levels for every surface. The first is the minimum level,
    // every cell intersecting a surface gets refined up to the minimum level.
    // The second level is the maximum level. Cells that 'see' multiple
    // intersections where the intersections make an
    // angle > resolveFeatureAngle get refined up to the maximum level.

    refinementSurfaces
    {
		AMI-ext-in//"AMI*"
        {
			#include "../include/refinement-ami-int"
        }
		AMI-int0-out//"AMI*"
        {
			#include "../include/refinement-ami-int"
        }
		AMI-int1-out//"AMI*"
        {
			#include "../include/refinement-ami-int"
        }
		AMI-int2-out//"AMI*"
        {
			#include "../include/refinement-ami-int"
        }		
    }

    // Region-wise refinement
    // ~~~~~~~~~~~~~~~~~~~~~~

    // Specifies refinement level for cells in relation to a surface. One of
    // three modes
    // - distance. 'levels' specifies per distance to the surface the
    //   wanted refinement level. The distances need to be specified in
    //   descending order.
    // - inside. 'levels' is only one entry and only the level is used. All
    //   cells inside the surface get refined up to the level. The surface
    //   needs to be closed for this to be possible.
    // - outside. Same but cells outside.

    refinementRegions {}


    // Mesh selection
    // ~~~~~~~~~~~~~~

    // After refinement patches get added for all refinementSurfaces and
    // all cells intersecting the surfaces get put into these patches. The
    // section reachable from the locationInMesh is kept.
    // NOTE: This point should never be on a face, always inside a cell, even
    // after refinement.
    locationInMesh (0 0 0.11);
}



// Settings for the snapping.
snapControls
{
	#include "../include/snap-prop"
}




// Settings for the layer addition.
addLayersControls
{

    // Per final patch (so not geometry!) the layer information
    layers
    {
		AMI-int0-out
		{
		    nSurfaceLayers 2;
		}
		AMI-int1-out
		{
		    nSurfaceLayers 2;
		}
		AMI-int2-out
		{
		    nSurfaceLayers 2;
		}
		AMI-ext-in
		{
			nSurfaceLayers 2;
		}
    }

	#include "../include/layers-prop"
}



// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
	#include "../include/mesh-quality-prop"
}


// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;


// ************************************************************************* //
