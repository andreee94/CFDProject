/*--------------------------------*- C++ -*----------------------------------*\
| =========                 |                                                 |
| \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox           |
|  \\    /   O peration     | Version:  2.3.0                                 |
|   \\  /    A nd           | Web:      www.OpenFOAM.org                      |
|    \\/     M anipulation  |                                                 |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      createPatchDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

// Do a synchronisation of coupled points after creation of any patches.
// Note: this does not work with points that are on multiple coupled patches
//       with transformations (i.e. cyclics).
pointSync false;

// Patches to create.
patches
(

//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
	{
        // Name of new patch
        name AMI-int0-master;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int0-master;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int0-slave;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int0-in);
    }
    {
        // Name of new patch
        name AMI-int0-slave;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int0-slave;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int0-master;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int0-out);
    }
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
	{
        // Name of new patch
        name AMI-int1-master;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int1-master;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int1-slave;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int1-in);
    }
    {
        // Name of new patch
        name AMI-int1-slave;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int1-slave;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int1-master;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int1-out);
    }
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
	{
        // Name of new patch
        name AMI-int2-master;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int2-master;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int2-slave;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int2-in);
    }
    {
        // Name of new patch
        name AMI-int2-slave;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-int2-slave;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-int2-master;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-int2-out);
    }
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
	{
        // Name of new patch
        name AMI-ext-master;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-ext-master;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-ext-slave;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-ext-in);
    }
    {
        // Name of new patch
        name AMI-ext-slave;
        // Dictionary to construct new patch from
        patchInfo
        {
        		name            AMI-ext-slave;
                type            cyclicAMI;
                inGroups        (cyclicAMI);
                matchTolerance  0.0001;
                neighbourPatch  AMI-ext-master;
                transform       noOrdering;
        }
        // How to construct: either from 'patches' or 'set'
        constructFrom patches;
        // If constructFrom = patches : names of patches. Wildcards allowed.
        patches (AMI-ext-out);
    }
//////////////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////
);

// ************************************************************************* //
